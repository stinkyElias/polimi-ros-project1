// Generated by gencpp from file first_project/Odom.msg
// DO NOT EDIT!


#ifndef FIRST_PROJECT_MESSAGE_ODOM_H
#define FIRST_PROJECT_MESSAGE_ODOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace first_project
{
template <class ContainerAllocator>
struct Odom_
{
  typedef Odom_<ContainerAllocator> Type;

  Odom_()
    : x(0.0)
    , y(0.0)
    , th(0.0)
    , timestamp()  {
    }
  Odom_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , th(0.0)
    , timestamp(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _th_type;
  _th_type th;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::first_project::Odom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::first_project::Odom_<ContainerAllocator> const> ConstPtr;

}; // struct Odom_

typedef ::first_project::Odom_<std::allocator<void> > Odom;

typedef boost::shared_ptr< ::first_project::Odom > OdomPtr;
typedef boost::shared_ptr< ::first_project::Odom const> OdomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::first_project::Odom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::first_project::Odom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::first_project::Odom_<ContainerAllocator1> & lhs, const ::first_project::Odom_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.th == rhs.th &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::first_project::Odom_<ContainerAllocator1> & lhs, const ::first_project::Odom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace first_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::first_project::Odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::first_project::Odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::first_project::Odom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::first_project::Odom_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::first_project::Odom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::first_project::Odom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::first_project::Odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ad4d47bd7471de79f48d9aba6f11a1c";
  }

  static const char* value(const ::first_project::Odom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ad4d47bd7471de7ULL;
  static const uint64_t static_value2 = 0x9f48d9aba6f11a1cULL;
};

template<class ContainerAllocator>
struct DataType< ::first_project::Odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "first_project/Odom";
  }

  static const char* value(const ::first_project::Odom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::first_project::Odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 th\n"
"string timestamp\n"
;
  }

  static const char* value(const ::first_project::Odom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::first_project::Odom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.th);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::first_project::Odom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::first_project::Odom_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "th: ";
    Printer<double>::stream(s, indent + "  ", v.th);
    s << indent << "timestamp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIRST_PROJECT_MESSAGE_ODOM_H
